package com.manuanand.courses;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.StringTokenizer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/module") // This means URL's start with /module (after Application path)
public class ModuleController {
	@Autowired // This means to get the bean called moduleRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ModuleRepository moduleRepository;

	@Autowired // This means to get the bean called moduleRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CourseRepository courseRepository;
	
	///
	// Module Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Module addModule (
			@RequestParam Integer courseId, @RequestParam String title, 
			@RequestParam String uri, @RequestParam Double hoursToComplete,
			@RequestParam(required = false) String commaDelimitedInstructorList,
			@RequestParam (required = false) String comments) {

		// Check whether the course is valid
		Optional<Course> course = courseRepository.findById(courseId);
		if (course.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Course with ID" + courseId + " not found");
		}
		
		Module newModule = new Module();
		newModule.setCourseId(courseId);
		newModule.setTitle(title);
		newModule.setUri(uri);
		newModule.setComments(comments);
		
		List<String> instructorList = new ArrayList<String>();
		if (commaDelimitedInstructorList != null) {
			StringTokenizer tokenizer = new StringTokenizer(commaDelimitedInstructorList, ",");
			while (tokenizer.hasMoreTokens()) {
				instructorList.add(tokenizer.nextToken());
			}
		}
		
		// Validate before adding that there is atleast one instructor
		if (instructorList.size() > 0) {
			newModule.setInstructors(instructorList);
		}
		
		moduleRepository.save(newModule);
		
		return newModule;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<Module> getAllCategories() {
		
		// This returns a JSON or XML with the users
		return moduleRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Module getSpecificModule(@PathVariable String id) {
		
		Integer moduleId = null;
		try {
			moduleId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Module> module = moduleRepository.findById(moduleId);
		if (!module.isEmpty()) {
			return module.get();
		} 

		return null;
	}
}